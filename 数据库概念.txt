---------------------------------------数据库系统基本概念------------------------------------
数据库数据控制功能
	数据库的恢复、并发控制、数据的完整性、安全性
数据抽象的级别
	概念模型（比如实体-联系模型）、逻辑模型、外部模型、内部模型
	外部模型：表达用户使用观点的DB局部逻辑结构的模型，外部模型中的模式称为视图
三级模式：
	外模式：是逻辑模式的子集
	逻辑模式
	内模式：数据库在物理存储方面的描述
两级映像：是数据与程序具有较高的独立性
	外模式/逻辑模式映像
	逻辑模式/内模式映像
数据库系统的三级模式、两级映像结构是数据库系统达到了高度的数据独立性
DBMS:数据库的管理系统(数据库的核心)
	主要功能：数据库的定义功能（提供DDL定义数据库的三级模式、两级映像）、数据库的操纵功能、数据库的保护功能、数据库的维护功能、数据字典

--------------------------------------数据库设计和E-R模型------------------------------------
数据库系统生存期：
	规划、需求分析、概念设计、逻辑设计、物理设计、实现、运行维护
	逻辑设计阶段：将概念模型转换成DBMS能处理的逻辑模型。外模式也将在此阶段完成
关系模型的定义：
	用二维表格表示实体集，用关键码表示实体之间联系的数据模型
关系的定义：
	是一个属性数目相同的元组的集合
关系和表的区别：
	关系(relation)中不可以出现重复元组，而表(table)中可以有重复的元组
三类完整性原则：
	实体完整性原则、参照完整性原则、用户定义的完整性原则
	实体完整性原则：关系中元组在组成主码的属性上不能为空
	参照完整性原则：如果属性集K是关系模式R1的主码，K也是关系模式R2的外码，那么在R2关系中，K的取值要么为空，要么为R1关系中的某个主码的值，也就是不允许引用不存在的实体

ER图转化为关系模式：（属于数据库设计的逻辑设计）
	实体集的转换：将每个实体集换成一个关系模式，实体的属性就是关系模式的属性，实体的主码即为关系模式的主码
	联系集的转换：（一对一和多对一的可以将联系集合并到实体集中去）
		一对一：可以在任意一个实体集的属性集中加入另一个属性集的主码作为外码再加上联系集的描述属性
		一对多：在“多”的实体集的关系模式的属性集中加入“一”的实体集的主码作为外码再加上联系集的描述属性
		多对多：将联系模式转换为关系模式，其属性为两端实体集的主码的并集（作为外码）加上联系集本身的描述属性


---------------------------------------关系模式设计理论--------------------------------------
数据冗余：同一个数据在系统中多次重复出现
关系模式设计不当引起的异常问题：数据冗余、操作异常（修改异常、插入异常和删除异常）
关系模式的非形式设计准则：
	1、关系模式的设计应尽可能只包含有直接联系的属性，不要包含有间接联系的属性，也就是，每个关系模式应只对应一个实体模型或一个联系模型
	2、关系模式的设计应该尽可能使得相应关系不出现插入异常、删除和修改异常
	3、避免放置经常为空值的属性
	4、尽可能使得连接在主键和外键的属性上进行，保证以后不会生成额外的元组

-------------------------------------------函数依赖------------------------------------------
局部依赖和完全依赖：
	对于FD W->A，如果存在X是W的真子集使得X->A成立，那么称W->A是局部依赖（A局部依赖于W），否则是完全依赖
传递依赖：
	如果X->Y，Y->Z，且Y不包含于X，X不依赖于Y，则Z传递依赖于X
第三范式是依赖保持的
BC范式是无损分解的
无损分解：R分解为R1、R2，当且仅当R1和R2自然连接之后和R等价的时候是无损的
	  判定方法：如果R1∩R2是R1或R2的超码，那么就是无损分解
BCNF分解：
	1、如果R满足BCNF则不必操作
	2、如果FD：X->Y不满足条件，则计算{X}+，X的闭包也就是X能决定什么
	3、拆分，将{X}+作为一个关系R1，X与剩下的部分作为另一个关系R2
	4、对R1、R2做前三部分的递归